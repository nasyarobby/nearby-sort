{"version":3,"file":"sort.module.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Index file for the package\n * @author Yousuf Kalim\n */\n// Distance calculation\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return d;\n};\n\n// Deg conversion\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n\n// Validate the arguments\nconst validateArgs = (lat: number, long: number, arr: any[], asc: boolean): void => {\n  if (!lat || !long || !arr) {\n    throw new Error('Invalid arguments');\n  }\n  if (typeof lat !== 'number' || typeof long !== 'number') {\n    throw new Error('lat and long should be numbers');\n  }\n  if (!Array.isArray(arr)) {\n    throw new Error('Second argument should be an array');\n  }\n  if (typeof asc !== 'boolean') {\n    throw new Error('Asc argument should be a boolean');\n  }\n};\n\n/**\n * Sort the array according to the user's lat long\n * @param lat {Number} - User's latitude\n * @param long {Number} - User's longitude\n * @param arr {Array} - Array of objects that contain lat and long\n * @param asc {Boolean} - Ascending or descending order\n * @returns {Array} - Sorted array\n */\nconst nearbySort = async (\n  { lat, long }: { lat: number; long: number },\n  arr: any[],\n  asc = true,\n): Promise<any[]> => {\n  return await new Promise((resolve, reject) => {\n    try {\n      validateArgs(lat, long, arr, asc);\n      const sortedArray = arr.sort((a, b) => {\n        const distanceA = getDistance(lat, long, a.lat, a.long);\n        const distanceB = getDistance(lat, long, b.lat, b.long);\n        return asc ? distanceA - distanceB : distanceB - distanceA;\n      });\n      resolve(sortedArray);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport default nearbySort;\n"],"names":["lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","Math","sin","cos","atan2","sqrt","deg","PI","nearbySort","_ref","arr","asc","lat","long","Promise","resolve","reject","Error","Array","isArray","validateArgs","sort","b","distanceA","getDistance","distanceB","err","e"],"mappings":"AAKA,MAAoB,SAACA,EAAcC,EAAcC,EAAcC,GAC7D,IACMC,EAAOC,EAAQH,EAAOF,GAClBM,EAAGD,EAAQF,EAAOF,GACtBM,EACJC,KAAKC,IAAIL,EAAO,GAAKI,KAAKC,IAAIL,EAAO,GACrCI,KAAKE,IAAIL,EAAQL,IAASQ,KAAKE,IAAIL,EAAQH,IAASM,KAAKC,IAAIH,EAAO,GAAKE,KAAKC,IAAIH,EAAO,GAG3F,OAFU,EAAIE,KAAKG,MAAMH,KAAKI,KAAKL,GAAIC,KAAKI,KAAK,EAAIL,IAN3C,IASZ,EAGaF,EAAG,SAACQ,GACf,OAAUA,GAAIL,KAAKM,GAAK,IAC1B,EA0BMC,WAAUC,EAEdC,EACAC,OAFKC,EAAAH,EAAHG,IAAKC,EAEPF,EAAAA,cAAAA,IAAAA,GAAM,GACY,IAAA,OAAAG,QAAAC,QACL,IAAWD,QAAC,SAACC,EAASC,GACjC,KA7BiB,SAACJ,EAAaC,EAAcH,EAAYC,GAC3D,IAAKC,IAAQC,IAASH,EACpB,MAAUO,IAAAA,MAAM,qBAElB,GAAmB,oBAA4B,iBAATJ,EACpC,MAAM,UAAU,kCAElB,IAAKK,MAAMC,QAAQT,GACjB,MAAM,UAAU,sCAElB,GAAmB,kBAALC,EACZ,MAAM,UAAU,mCAEpB,CAiBMS,CAAaR,EAAKC,EAAMH,EAAKC,GAM7BI,EALoBL,EAAIW,KAAK,SAACrB,EAAGsB,GAC/B,IAAMC,EAAYC,EAAYZ,EAAKC,EAAMb,EAAEY,IAAKZ,QACjCyB,EAAGD,EAAYZ,EAAKC,EAAMS,EAAEV,IAAKU,QAChD,OAAUX,EAAGY,EAAYE,EAAYA,EAAYF,CACnD,GAID,CAFC,MAAOG,GACPV,EAAOU,EACR,CACH,GACD,CAAA,MAAAC,GAAA,OAAAb,QAAAE,OAAAW,EAAA,CAAA"}