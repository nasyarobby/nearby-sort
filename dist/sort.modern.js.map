{"version":3,"file":"sort.modern.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Index file for the package\n * @author Yousuf Kalim\n */\n// Distance calculation\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return d;\n};\n\n// Deg conversion\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n\n// Validate the arguments\nconst validateArgs = (lat: number, long: number, arr: any[], asc: boolean): void => {\n  if (\n    isNaN(parseFloat(lat as unknown as string)) ||\n    isNaN(parseFloat(long as unknown as string)) ||\n    !arr\n  ) {\n    throw new Error('Invalid arguments');\n  }\n  if (typeof lat !== 'number' || typeof long !== 'number') {\n    throw new Error('lat and long should be numbers');\n  }\n  if (!Array.isArray(arr)) {\n    throw new Error('Second argument should be an array');\n  }\n  if (typeof asc !== 'boolean') {\n    throw new Error('Asc argument should be a boolean');\n  }\n};\n\n/**\n * Sort the array according to the user's lat long\n * @param lat {Number} - User's latitude\n * @param long {Number} - User's longitude\n * @param arr {Array} - Array of objects that contain lat and long\n * @param asc {Boolean} - Ascending or descending order\n * @returns {Array} - Sorted array\n */\nconst nearbySort = async (\n  { lat, long }: { lat: number; long: number },\n  arr: any[],\n  asc = true,\n): Promise<any[]> => {\n  return await new Promise((resolve, reject) => {\n    try {\n      validateArgs(lat, long, arr, asc);\n      const sortedArray = arr.\n      map(el => {\n        return {...el, d: getDistance(lat, long, el.lat, el.long)}\n      })\n      .sort((a, b) => {\n        return asc ? (a.d - b.d) : (b.d - a.d);\n      });\n      resolve(sortedArray);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport default nearbySort;\n"],"names":["getDistance","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","Math","sin","cos","atan2","sqrt","d","deg","PI","nearbySort","async","lat","long","arr","asc","Promise","resolve","reject","validateArgs","isNaN","parseFloat","Error","Array","isArray","map","el","_extends","sort","b","err"],"mappings":"oOAKA,MAAMA,EAAcA,CAACC,EAAcC,EAAcC,EAAcC,KAC7D,MACMC,EAAOC,EAAQH,EAAOF,GACtBM,EAAOD,EAAQF,EAAOF,GACtBM,EACJC,KAAKC,IAAIL,EAAO,GAAKI,KAAKC,IAAIL,EAAO,GACrCI,KAAKE,IAAIL,EAAQL,IAASQ,KAAKE,IAAIL,EAAQH,IAASM,KAAKC,IAAIH,EAAO,GAAKE,KAAKC,IAAIH,EAAO,GAG3F,OAFU,EAAIE,KAAKG,MAAMH,KAAKI,KAAKL,GAAIC,KAAKI,KAAK,EAAIL,IAN3C,IAQHM,EAIHR,EAAWS,GACRA,GAAON,KAAKO,GAAK,KA+BpBC,EAAaC,OACfC,MAAKC,QACPC,EACAC,GAAM,UAEW,IAAAC,QAAQ,CAACC,EAASC,KACjC,IAjCiBC,EAACP,EAAaC,EAAcC,EAAYC,KAC3D,GACEK,MAAMC,WAAWT,KACjBQ,MAAMC,WAAWR,MAChBC,EAED,MAAU,IAAAQ,MAAM,qBAElB,GAAmB,iBAARV,GAAoC,iBAATC,EACpC,MAAM,IAAIS,MAAM,kCAElB,IAAKC,MAAMC,QAAQV,GACjB,MAAM,IAAIQ,MAAM,sCAElB,GAAmB,kBAARP,EACT,MAAM,IAAIO,MAAM,mCACjB,EAkBGH,CAAaP,EAAKC,EAAMC,EAAKC,GAQ7BE,EAPoBH,EACpBW,IAAIC,GACFC,KAAWD,EAAE,CAAEnB,EAAGd,EAAYmB,EAAKC,EAAMa,EAAGd,IAAKc,EAAGb,SAErDe,KAAK,CAAC3B,EAAG4B,IACDd,EAAOd,EAAEM,EAAIsB,EAAEtB,EAAMsB,EAAEtB,EAAIN,EAAEM,GAGvC,CAAC,MAAOuB,GACPZ,EAAOY,EACR"}